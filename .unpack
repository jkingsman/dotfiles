#!/usr/bin/env bash

DIR="$(dirname "${BASH_SOURCE[0]}")"

# place files
declare -a files=(".bashrc_personal" ".bash_aliases" ".bash_env" ".bash_prompt" ".git_alias" ".vimrc" ".profile" ".atl_bashrc")
for i in "${files[@]}"
do
   if test -e "$DIR/$i"; then
      echo "Copying $i"
      cp $DIR/$i ~/$i
   else
      echo "Didn't find $i; skipping"
   fi
done

# invoke from bashrc
SCRIPT_CONTENTS="source ~/.bashrc_personal;return;"
if ! grep ".bashrc_personal" ~/.bashrc > /dev/null 2>&1; then
   echo "Loading .bashrc with personal RC invocation..."
   echo $SCRIPT_CONTENTS >> ~/.bashrc
   chmod +x ~/.bashrc
else
   echo "Found invocation in .bashrc; skipping..."
fi

echo "Loading git aliases..."
git config --global alias.co "checkout"
git config --global alias.chp "cherry-pick"
git config --global alias.git '!exec git'
git config --global alias.unfuck '!git reset --hard @{u} && git clean -f -d'
git config --global alias.superunfuck '!git cherry-pick --abort; git rebase --abort; git reset --hard @{u} && git clean -f -d'
git config --global alias.serve "daemon --verbose --export-all --base-path=.git --reuseaddr --strict-paths .git/"
git config --global alias.mergemaster '!git fetch origin master:master && git merge master'
git config --global alias.mergemain '!git fetch origin main:main && git merge main'
git config --global alias.recent '!git for-each-ref --sort=-committerdate refs/heads/ --count=10 --format='"'"'%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'"'"''
git config --global alias.finmerge '!git add . && git commit --no-edit && git push'
git config --global alias.rebasemain '!git pull --rebase origin main && git push --force'
git config --global alias.rebasemaster '!git pull --rebase origin master && git push --force'
git config --global alias.finrebase '!git add . && GIT_EDITOR=true git rebase --continue && git push --force'
git config --global alias.showdroppedstash '!git fsck --unreachable | grep commit | cut -d" " -f3 | xargs git log --merges --no-walk --grep=WIP'

echo "Configuring git globals..."
git config --global --type bool push.autoSetupRemote true
git config --global pull.rebase true
git config --global core.autocrlf input

echo "Configuring git diff..."
# Find diff-highlight location
if command -v brew &> /dev/null && brew list git &> /dev/null; then
    # macOS with Homebrew
    DIFF_HIGHLIGHT="$(brew --prefix git)/share/git-core/contrib/diff-highlight/diff-highlight"
elif [ -f /usr/share/doc/git/contrib/diff-highlight/diff-highlight ]; then
    # Common Linux location (Ubuntu/Debian)
    DIFF_HIGHLIGHT="/usr/share/doc/git/contrib/diff-highlight/diff-highlight"
elif [ -f /usr/share/git-core/contrib/diff-highlight/diff-highlight ]; then
    # Alternative Linux location (Fedora/RHEL)
    DIFF_HIGHLIGHT="/usr/share/git-core/contrib/diff-highlight/diff-highlight"
else
    # Try to find it relative to git executable
    GIT_EXEC_PATH="$(git --exec-path)"
    DIFF_HIGHLIGHT="${GIT_EXEC_PATH%/libexec/git-core}/share/git-core/contrib/diff-highlight/diff-highlight"
fi

# Check if diff-highlight exists
if [ -f "$DIFF_HIGHLIGHT" ]; then
    git config --global interactive.diffFilter "perl $DIFF_HIGHLIGHT"
    git config --global pager.diff "perl $DIFF_HIGHLIGHT | less"
    git config --global pager.log "perl $DIFF_HIGHLIGHT | less"
    git config --global pager.show "perl $DIFF_HIGHLIGHT | less"
else
   echo "Diff-highlight not found! Maybe you need to cd /usr/share/doc/git/contrib/diff-highlight && sudo make"
fi

echo "Configuring global git ignores..."
# Create .config directory if it doesn't exist
mkdir -p "$HOME/.config"

# Create/recreate global gitignore file with our entries
GLOBAL_GITIGNORE="$HOME/.config/gitignore_global"
cat > "$GLOBAL_GITIGNORE" << 'EOF'
CLAUDE.md
.claude/
EOF

# Configure git to use the global gitignore file
git config --global core.excludesfile "$GLOBAL_GITIGNORE"
